name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd web/rensto-site
          npm ci

      - name: Run linting
        run: |
          cd web/rensto-site
          npm run lint

      - name: Run type checking
        run: |
          cd web/rensto-site
          npm run typecheck

      - name: Run tests
        run: |
          cd web/rensto-site
          npm test

      - name: Build application
        run: |
          cd web/rensto-site
          npm run build

  infrastructure-test:
    name: Infrastructure Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose
        run: |
          cd infra
          docker-compose config

      - name: Validate MCP Servers
        run: |
          cd infra
          for server in mcp-servers/*/; do
            if [ -f "$server/package.json" ]; then
              echo "Testing $server"
              cd "$server"
              npm ci
              node -c server.js
              cd ../..
            fi
          done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          cd web/rensto-site
          npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: HEAD~1

  deploy-web:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    needs: [test, infrastructure-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        run: |
          cd web/rensto-site
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_TEAM_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test, infrastructure-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to RackNerd VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/rensto
            git pull origin main
            cd infra
            docker-compose down
            docker-compose up -d
            ./test-integrations.sh
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-infrastructure]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy-web.result == 'success' && needs.deploy-infrastructure.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Web: https://rensto-site.vercel.app"
          echo "n8n: http://173.254.201.134:5678"

      - name: Notify on failure
        if: needs.deploy-web.result == 'failure' || needs.deploy-infrastructure.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details"
